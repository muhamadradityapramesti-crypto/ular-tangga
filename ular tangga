<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Ular Tangga Edukasi ‚Äî 2 Pemain</title>
    <style>
        * { margin:0; padding:0; box-sizing:border-box; }
        body {
            font-family: sans-serif;
            background: linear-gradient(135deg, #74ABE2 0%, #5563DE 100%);
            min-height:100vh;
            display:flex;
            justify-content:center;
            align-items:center;
            padding:20px;
        }
        .container {
            background: #ffffff;
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
            max-width: 900px;
            width: 100%;
        }
        h1 {
            text-align: center;
            color: #333;
        }
        .main-area {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }
        .board {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            gap: 2px;
            background: #333;
            border-radius: 10px;
            padding: 5px;
            width: 600px;
        }
        .cell {
            background: #f1f1f1;
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            font-size: 12px;
            font-weight: bold;
            border-radius: 5px;
            transition: transform .2s;
        }
        .cell:hover {
            transform: scale(1.03);
        }
        .cell.snake-head { background: #ff6b6b; color: white; }
        .cell.snake-tail { background: #ffccc7; color: #900; }
        .cell.ladder-bottom { background: #51cf66; color: white; }
        .cell.ladder-top { background: #d3f9d8; color: #2f9e44; }

        .player {
            position: absolute;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            border: 2px solid #333;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 12px;
            font-weight: bold;
            transition: all .3s ease;
        }
        .player.p0 {
            background: #ffd43b;
            color: #333;
            transform: translate(-10px, -10px);
        }
        .player.p1 {
            background: #51cf66;
            color: #fff;
            transform: translate(10px, 10px);
        }

        .controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
            min-width: 200px;
        }
        .dice {
            width: 80px;
            height: 80px;
            background: #fff;
            border: 3px solid #333;
            border-radius: 15px;
            font-size: 2.5em;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .dice.rolling {
            animation: rollAnim 1s ease-in-out;
        }
        @keyframes rollAnim {
            0%,100% { transform: rotate(0deg); }
            25% { transform: rotate(90deg); }
            50% { transform: rotate(180deg); }
            75% { transform: rotate(270deg); }
        }
        .btn-roll {
            padding: 10px 18px;
            border: none;
            border-radius: 8px;
            background: #4ecdc4;
            color: white;
            font-size: 16px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        .btn-roll:disabled {
            background: #ccc;
            cursor: default;
        }

        .info {
            background: #5563DE;
            color: white;
            padding: 12px;
            border-radius: 8px;
            width: 200px;
            font-weight: bold;
        }
        .status {
            background: rgba(255,255,255,0.15);
            padding: 8px;
            border-radius: 6px;
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
        }
        .turn-display {
            text-align: center;
            margin-top: 8px;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            left:0; top:0;
            width: 100%; height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }
        .modal .modal-content {
            background: white;
            padding: 20px;
            border-radius: 12px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }
        .question-title {
            font-size: 20px;
            text-align: center;
            margin-bottom: 10px;
        }
        .question-seq {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            padding: 10px;
            text-align: center;
            margin: 10px 0;
            font-size: 18px;
            font-weight: bold;
        }
        .options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 12px;
        }
        .option {
            background: #f1f1f1;
            padding: 8px;
            text-align: center;
            border-radius: 6px;
            cursor: pointer;
            font-weight: bold;
            border: 2px solid #e9ecef;
        }
        .option:hover {
            border-color: #2196F3;
            background: #e3f2fd;
        }
        .option.correct {
            background: #d4edda;
            border-color: #28a745;
        }
        .option.incorrect {
            background: #f8d7da;
            border-color: #dc3545;
        }
        .result-msg {
            text-align: center;
            margin: 12px 0;
            font-weight: bold;
        }
        .explanation {
            background: #e7f3ff;
            padding: 8px;
            border-radius: 6px;
            margin-top: 8px;
            display: none;
        }
        .btn-continue {
            display: block;
            margin: 12px auto 0;
            padding: 8px 14px;
            border: none;
            border-radius: 6px;
            background: #28a745;
            color: white;
            cursor: pointer;
        }
        .win-text {
            text-align: center;
            font-size: 22px;
            font-weight: bold;
            color: #28a745;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üêç Ular Tangga Edukasi ‚Äî 2 Pemain ü™ú</h1>
        <div class="main-area">
            <div class="board" id="board"></div>
            <div class="controls">
                <div class="dice" id="dice">üé≤</div>
                <button class="btn-roll" id="btnRoll" onclick="rollDice()">Lempar Dadu</button>
                <div class="info">
                    <div class="status">
                        <div>üü° P1</div>
                        <div>Pos: <span id="pos1">1</span><br>Skor: <span id="scr1">0</span><br>Soal: <span id="q1">0</span></div>
                    </div>
                    <div class="status">
                        <div>üü¢ P2</div>
                        <div>Pos: <span id="pos2">1</span><br>Skor: <span id="scr2">0</span><br>Soal: <span id="q2">0</span></div>
                    </div>
                    <div class="turn-display">Giliran: <span id="turnText">Player 1</span></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Soal -->
    <div class="modal" id="modal">
        <div class="modal-content">
            <div class="question-title">Soal Logika Deret</div>
            <div class="question-seq" id="seqText"></div>
            <div class="options" id="opts"></div>
            <div class="result-msg" id="resMsg"></div>
            <div class="explanation" id="explain"></div>
            <button class="btn-continue" id="btnContinue" onclick="closeModal()">Lanjutkan</button>
        </div>
    </div>

    <script>
        // data soal
        const questions = [
            { question:"Lanjutkan deret berikut:", sequence:"2, 4, 8, 16, 32, ...", options:["48","64","72","80"], correct:1, explanation:"Deret dikali 2" },
            { question:"Lanjutkan deret berikut:", sequence:"1, 4, 9, 16, 25, ...", options:["30","32","36","40"], correct:2, explanation:"Bilangan kuadrat (6¬≤=36)" },
            { question:"Lanjutkan deret berikut:", sequence:"1, 3, 6, 10, 15, ...", options:["18","20","21","24"], correct:2, explanation:"Bilangan segitiga" },
            { question:"Lanjutkan deret berikut:", sequence:"2, 6, 12, 20, 30, ...", options:["40","42","45","48"], correct:1, explanation:"n √ó (n+1)" },
            { question:"Lanjutkan deret berikut:", sequence:"1, 2, 6, 24, 120, ...", options:["600","720","840","960"], correct:1, explanation:"Faktorial" },
            { question:"Lanjutkan deret berikut:", sequence:"0, 1, 1, 2, 3, 5, 8, ...", options:["11","12","13","15"], correct:2, explanation:"Fibonacci" },
            { question:"Lanjutkan deret berikut:", sequence:"100, 90, 80, 70, ...", options:["50","55","60","65"], correct:2, explanation:"Kurangi 10 tiap langkah" },
            { question:"Lanjutkan deret berikut:", sequence:"2, 3, 5, 7, 11, 13, ...", options:["15","16","17","19"], correct:2, explanation:"Bilangan prima (setelah 13 adalah 17)" },
            { question:"Lanjutkan deret berikut:", sequence:"1, 8, 27, 64, ...", options:["100","125","144","169"], correct:1, explanation:"Bilangan kubik" },
            { question:"Lanjutkan deret berikut:", sequence:"81, 27, 9, 3, ...", options:["0","1","2","3"], correct:1, explanation:"Dibagi 3 tiap langkah" }
        ];

        const snakes = { 16:6, 47:26, 49:11, 56:53, 62:19, 64:60, 87:24, 93:73, 95:75, 98:78 };
        const ladders = { 1:38, 4:14, 9:21, 21:42, 28:84, 36:44, 51:67, 71:91, 80:100 };

        let players = [
            { pos:1, score:0, answered:0 },
            { pos:1, score:0, answered:0 }
        ];
        let current = 0;
        let isMoving = false;
        let currentQ = null;

        function init() {
            buildBoard();
            updateUI();
        }

        function buildBoard() {
            const board = document.getElementById('board');
            board.innerHTML = '';
            for (let r = 9; r >= 0; r--) {
                for (let c = 0; c < 10; c++) {
                    let num;
                    if (r % 2 === 0) {
                        num = r * 10 + (c + 1);
                    } else {
                        num = r * 10 + (10 - c);
                    }
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.id = 'cell-' + num;
                    cell.textContent = num;

                    if (snakes[num]) {
                        cell.classList.add('snake-head');
                        cell.innerHTML = `${num}<br>üêç`;
                    } else if (Object.values(snakes).includes(num)) {
                        cell.classList.add('snake-tail');
                    }
                    if (ladders[num]) {
                        cell.classList.add('ladder-bottom');
                        cell.innerHTML = `${num}<br>ü™ú`;
                    } else if (Object.values(ladders).includes(num)) {
                        cell.classList.add('ladder-top');
                    }

                    board.appendChild(cell);
                }
            }
            // place players
            placePlayers();
        }

        function placePlayers() {
            // remove if ada dulu
            const old0 = document.getElementById('player0');
            const old1 = document.getElementById('player1');
            if (old0) old0.remove();
            if (old1) old1.remove();

            const p0 = document.createElement('div');
            p0.classList.add('player','p0');
            p0.id = 'player0';
            p0.textContent = '1';
            document.getElementById('cell-' + players[0].pos).appendChild(p0);

            const p1 = document.createElement('div');
            p1.classList.add('player','p1');
            p1.id = 'player1';
            p1.textContent = '2';
            document.getElementById('cell-' + players[1].pos).appendChild(p1);
        }

        function rollDice() {
            if (isMoving) return;
            const dice = document.getElementById('dice');
            const btn = document.getElementById('btnRoll');
            btn.disabled = true;
            dice.classList.add('rolling');
            setTimeout(() => {
                const val = Math.floor(Math.random()*6) + 1;
                dice.textContent = val;
                dice.classList.remove('rolling');
                movePlayer(val);
            }, 900);
        }

        function movePlayer(steps) {
            isMoving = true;
            const pl = players[current];
            const target = Math.min(pl.pos + steps, 100);

            animateMove(current, pl.pos, target, () => {
                pl.pos = target;
                // snake / ladder
                if (snakes[pl.pos]) {
                    setTimeout(() => {
                        animateMove(current, pl.pos, snakes[pl.pos], () => {
                            pl.pos = snakes[pl.pos];
                            afterMove();
                        });
                    }, 400);
                } else if (ladders[pl.pos]) {
                    setTimeout(() => {
                        animateMove(current, pl.pos, ladders[pl.pos], () => {
                            pl.pos = ladders[pl.pos];
                            afterMove();
                        });
                    }, 400);
                } else {
                    afterMove();
                }
            });
        }

        function animateMove(pi, from, to, cb) {
            const el = document.getElementById('player' + pi);
            const fromCell = document.getElementById('cell-' + from);
            const toCell = document.getElementById('cell-' + to);
            if (fromCell && el.parentNode === fromCell) {
                fromCell.removeChild(el);
            }
            if (toCell) {
                toCell.appendChild(el);
            }
            setTimeout(() => {
                updateUI();
                if (cb) cb();
            }, 300);
        }

        function afterMove() {
            const pl = players[current];
            if (pl.pos === 100) {
                showWin(current);
                return;
            }
            // jika posisi ganjil dan >1, tampilkan soal
            if (pl.pos % 2 === 1 && pl.pos > 1) {
                showQuestion();
            } else {
                nextTurn();
            }
        }

        function showQuestion() {
            const rnd = Math.floor(Math.random()*questions.length);
            currentQ = questions[rnd];
            document.getElementById('seqText').textContent = currentQ.sequence;

            const optsDiv = document.getElementById('opts');
            optsDiv.innerHTML = '';
            currentQ.options.forEach((opt,i) => {
                const d = document.createElement('div');
                d.classList.add('option');
                d.textContent = opt;
                d.onclick = () => choose(i);
                optsDiv.appendChild(d);
            });

            document.getElementById('resMsg').textContent = '';
            document.getElementById('explain').style.display = 'none';
            document.getElementById('btnContinue').style.display = 'none';

            document.getElementById('modal').style.display = 'flex';
        }

        function choose(idx) {
            const opts = document.querySelectorAll('.option');
            opts.forEach((o,i) => {
                o.onclick = null;
                if (i === currentQ.correct) o.classList.add('correct');
                if (i === idx && i !== currentQ.correct) o.classList.add('incorrect');
            });

            const pl = players[current];
            pl.answered++;

            const rm = document.getElementById('resMsg');
            if (idx === currentQ.correct) {
                pl.score += 15;
                rm.textContent = `Benar! +15 poin`;
                rm.style.color = 'green';
            } else {
                rm.textContent = `Salah! Jawaban benar: ${currentQ.options[currentQ.correct]}`;
                rm.style.color = 'red';
            }

            const ex = document.getElementById('explain');
            ex.textContent = `Penjelasan: ${currentQ.explanation}`;
            ex.style.display = 'block';
            document.getElementById('btnContinue').style.display = 'block';

            updateUI();
        }

        function closeModal() {
            document.getElementById('modal').style.display = 'none';
            nextTurn();
        }

        function nextTurn() {
            isMoving = false;
            current = (current === 0) ? 1 : 0;
            document.getElementById('btnRoll').disabled = false;
            updateUI();
        }

        function updateUI() {
            document.getElementById('pos1').textContent = players[0].pos;
            document.getElementById('scr1').textContent = players[0].score;
            document.getElementById('q1').textContent = players[0].answered;

            document.getElementById('pos2').textContent = players[1].pos;
            document.getElementById('scr2').textContent = players[1].score;
            document.getElementById('q2').textContent = players[1].answered;

            document.getElementById('turnText').textContent = `Player ${current+1}`;
            placePlayers();
        }

        function showWin(pi) {
            document.getElementById('modal').style.display = 'flex';
            const mc = document.querySelector('.modal-content');
            mc.innerHTML = `
                <div class="win-text">üéâ Player ${pi+1} Menang! üéâ</div>
                <div style="text-align:center;">
                    Skor P1: ${players[0].score} <br>
                    Skor P2: ${players[1].score} <br>
                    Soal P1: ${players[0].answered} <br>
                    Soal P2: ${players[1].answered}
                </div>
                <button class="btn-continue" onclick="restart()">Main Lagi</button>
            `;
        }

        function restart() {
            players = [
                { pos:1, score:0, answered:0 },
                { pos:1, score:0, answered:0 }
            ];
            current = 0;
            isMoving = false;
            buildBoard();
            updateUI();
            document.getElementById('dice').textContent = 'üé≤';
            document.getElementById('modal').style.display = 'none';
            document.getElementById('btnRoll').disabled = false;
        }

        window.onload = init;
    </script>
</body>
</html>
